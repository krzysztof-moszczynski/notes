package com.todo.notes;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import com.todo.notes.entity.Note;
import com.todo.notes.entity.Task;
import com.todo.notes.repository.NoteRepository;
import com.todo.notes.service.NoteServiceImpl;

@RunWith(MockitoJUnitRunner.class)
public class NoteServiceImplTest {

    @Mock
    private NoteRepository noteRepository;

    @InjectMocks
    private NoteServiceImpl noteServiceImpl;

    @Test
    public void getNoteFromRepoTest() {
        Note note1 = new Note("note1");
        Note note2 = new Note("note2");

        List<Note> notes= Arrays.asList(note1, note2);

        Optional<Note> expectedNote = Optional.of(notes.get(0));
        when(noteRepository.findById(Long.valueOf(1))).thenReturn(expectedNote);
        Optional<Note> actualNote = Optional.of(noteServiceImpl.getNote(Long.valueOf(1)));
        assertEquals(expectedNote, actualNote);

    }

    //generated by Copilot test for saveNote
    @Test
    public void saveNoteToRepoCopilotTest() {
        Note note = new Note();
        note.setId(Long.valueOf(1));
        note.setTitle("note1");
        note.setTasks(new HashSet<>(Arrays.asList(
            new Task("go to gym"),
            new Task("go to uni"),
            new Task("go to hell")
        )));
        when(noteRepository.save(note)).thenReturn(note);
        assertEquals(note, noteServiceImpl.saveNote(note));
    }

    //generated by Copilot test for deleteNote
    @Test
    public void deleteNoteFromRepoTest() {
        Note note = new Note();
        note.setId(Long.valueOf(1));
        note.setTitle("note1");
        note.setTasks(new HashSet<>(Arrays.asList(
            new Task("go to gym"),
            new Task("go to uni"),
            new Task("go to hell")
        )));
        
    } 

    //generated by Copilot test for addTaskToNote
    @Test
    public void addTaskToNoteCopilotTest() {
        Note note = new Note();
        note.setId(Long.valueOf(1));
        note.setTitle("note1");
        note.setTasks(new HashSet<>(Arrays.asList(
            new Task("go to gym"),
            new Task("go to uni"),
            new Task("go to hell")
        )));
        when(noteRepository.save(note)).thenReturn(note);
        assertEquals(note, noteServiceImpl.saveNote(note));
    }

    //generated by Copilot test for getNotes
    @Test
    public void getNotesFromRepoCopilotTest() {

        Note note1 = new Note("note1");
        Note note2 = new Note("note2");

        List<Note> notes = Arrays.asList(note1, note2);

        when(noteRepository.findAll()).thenReturn(notes);
        assertEquals(notes, noteServiceImpl.getNotes());
    } 


    @Test
    public void getNotesFromRepoTest() {
        Note note1 = new Note("note1");
        Note note2 = new Note("note2");

        List<Note> expectedNotes = Arrays.asList(note1, note2);

        when(noteRepository.findAll()).thenReturn(expectedNotes);
        List<Note> actualNotes = noteServiceImpl.getNotes();
        assertEquals(expectedNotes, actualNotes);
    } 

}
